package ProjectEulerJava;

import java.text.MessageFormat;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.*;

import static ProjectEulerJava.TakeWhile.takeWhile;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

//Each new term in the Fibonacci sequence is generated by adding the previous
//two terms. By starting with 1 and 2, the first 10 terms will be:
//
//        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//        By considering the terms in the Fibonacci sequence whose values do
// not exceed four million, find the sum of the even-valued terms.

public class Problem2 {
    public static void main(String[] args) {
        System.out.println(MessageFormat.format("Sum: {0}", solver()));
    }

    public static long solver() {
        long maxValue = 100;
        return takeWhile(fibonacciStream(1, 2).boxed(), i -> i < maxValue)
                .mapToLong(i->i)
                .filter(l -> l % 2L == 0)
                .sum();
        // 233168
    }

    private static LongStream fibonacciStream(final long first, final long second) {
         return Stream
                .iterate(new long[]{first, second}, f -> new long[]{f[1], f[0] + f[1]})
                .mapToLong(f -> f[0]);
    }
}
