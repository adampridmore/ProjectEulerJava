package ProjectEulerJava;

import org.junit.Test;

import javax.swing.text.html.HTMLDocument;
import java.text.MessageFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

//Each new term in the Fibonacci sequence is generated by adding the previous
//two terms. By starting with 1 and 2, the first 10 terms will be:
//
//        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//        By considering the terms in the Fibonacci sequence whose values do
// not exceed four million, find the sum of the even-valued terms.

public class Problem2 {

    public static void main(String[] args) {
        System.out.println(MessageFormat.format("Sum: {0}", solver()));
    }

    public static long solver() {
        return Stream.generate(new Supplier<Long>() {
            private long n1 = 1;
            private long n2 = 2;

            @Override
            public Long get() {
                long fibonacci = n1;
                long n3 = n2 + n1;
                n1 = n2;
                n2 = n3;
                return fibonacci;
            }
        })
                .mapToLong(i -> i)
                .map(i -> {
                    //System.out.println(MessageFormat.format("{0}", i));
                    return i;
                })
                .limit(10)
                .sum();
        // 233168
    }

    @Test
    public void test(){
        assertThat(solver(), is(231));
    }
}
