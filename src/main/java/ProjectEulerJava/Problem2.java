package ProjectEulerJava;

import javax.swing.text.html.HTMLDocument;
import java.util.Iterator;
import java.util.List;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.UnaryOperator;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.StreamSupport;

//Each new term in the Fibonacci sequence is generated by adding the previous
//two terms. By starting with 1 and 2, the first 10 terms will be:
//
//        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//        By considering the terms in the Fibonacci sequence whose values do
// not exceed four million, find the sum of the even-valued terms.

public class Problem2 {
    private static class Fibonacci implements Iterable<Integer>{
        @Override
        public Iterator<Integer> iterator() {
            return new Iterator<Integer>(){
                private int fst = 0;
                private int snd = 1;
                @Override
                public boolean hasNext() {
                    return true;
                }

                @Override
                public Integer next() {
                    int next = fst + snd;

                    fst = snd;
                    snd = next;

                    return next;
                }
            };
        }
    }

    public static void main(String[] args) {
        Fibonacci fibonacci = new Fibonacci();
        Spliterator<Integer> spliterator = Spliterators
                .spliteratorUnknownSize(fibonacci.iterator(), 0);

        int sum = StreamSupport
                .stream(spliterator, false)
                .mapToInt(i->i)
                .limit(10)
                .sum()
                ;

        System.out.println(String.format("Sum: %d", sum));
        // 233168
    }
}
